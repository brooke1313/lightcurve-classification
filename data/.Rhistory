install.packages("swirl")
library("swirl")
swirl()
swirl()
swirl()
library("swirl")
install_course("Data Analysis")
install_course("Data Analysis")
install_course("Statistical Inference")
install_course("Regression Models"\
install_course("Regression Models")
swirl()
exit()
install.packages("MASS")
2.1 Installing and loading packages, and running predefined functions
#For instance I want to plot histogram using the function truehist
x <- runif(1000,0,1) #Generate 1000 standard uniform r.v.
x
truehist(x)
library(MASS)
truehist(x)
?truehist #This shows the help file for the function truehist
y1 <- matrix(c(1,2,3,4,5,6,7,8,9,0),nrow=2,ncol=5);y1 #by default it fills by column
y2 <- matrix(c(1,2,3,4,5,6,7,8,9,0),byrow=T,nrow=2,ncol=5);y2
y3 <- cbind(y1,y2);y3
y4 <- rbind(y1,y2);y4
y5 <- seq(0,10,by=2.5);y5
y6 <- seq(0,10,length=5);y6
y7 <- c(1,2)%*%t(c(2,1));y7
y8 <- solve(y7+diag(2));y8
y4[3:4,4:5]
y4[3:4,c(1,3,5)]
y4[1,] #extract one row. Note that it turns into a (column) vector
y4[-c(1,4),]
#2.3 Writing and running your own functions
#A very simple function to solve quadratic equations
myfunc <- function(A,B,C){ #Solve equations of the form Ax^2+Bx+C=0
discrim <- B^2-4*A*C
if(discrim < 0) stop("No real roots!")
r1 <- (-B-sqrt(discrim))/2/A
r2 <- (-B+sqrt(discrim))/2/A
return(c(r1,r2))
}
myfunc(3,6,2)
myfunc(3,4,5)
r1 #Why?
f1 <- function(z1){return(z1+z2)}
z2 <- 5
f1(1)
f2 <- function(z1){z2 <- 3; return(z1+z2)}
z2 <- 5
f2(1) #What happens?
#2.5 Debugging
#The following creates a matrix of normal r.v. with mean equal to the row number and unit variance
mat <- matrix(0,nrow=10000,ncol=5)
for(i in 1:10000){
mat[i,] <- rnorm(5,i,1) #Note how I push values into the i-th row of mat
if(i%%1000==0)print(mat[i,]) #Print every 1000th row
}
debug(myfunc)
myfunc(6,4,-3)
}
undebug(myfunc)
undebug(myfunc)
undebug(myfunc)
debug(myfunc)
myfunc(6,4,-3)
undebug(myfunc)
?rank
magic(3)
det(X)
?qr
X <- matrix(rexp(200, rate=.1), ncol=20)
X
det(X)
qr(X)$rank
qr(t(X))$rank
ncol(X)
nrow(X)
rank(X)
M <- matrix(data = rnorm(12), ncol = 3)
#run the function qr()
qr(M)$rank
X
X
x.test <- c(1,2,3,4,5,6,7,8,9,10)
x.test
?sample
sample(x.test, nrows(x.test)/5, replace=True)
sample(x.test, nrows(x.test)/5, replace=TRUE)
sample(x.test, nrow(x.test)/5, replace=TRUE)
nrow(x.test)
x.test <- cbind(x.test, x.test)
x.test
nrow(x.test)
sample(x.test, nrow(x.test)/5, replace=TRUE)
sample(x.test, nrow(x.test)*4/5, replace=TRUE)
sample(x.test, nrow(x.test)*4/5, replace=TRUE)
sample(x.test, nrow(x.test)*4/5, replace=False)
sample(x.test, nrow(x.test)*4/5, replace=FALSE)
X
nrow(X)
10*4/5
x.test
sample(x.test, 8)
x <- 1:12
# a random permutation
sample(x)
# bootstrap resampling -- only if length(x) > 1 !
sample(x, replace = TRUE)
x.test <- cbind(x.test, x.test)
x.test <- cbind(x.test, x.test)
x.test <- cbind(x.test, x.test)
x.test <- cbind(x.test, x.test)
x.test <- cbind(x.test, x.test)
x.test
ncol(x.test)
# sample()'s surprise -- example
x <- 1:10
sample(x[x >  8]) # length 2
sample(x[x >  9]) # oops -- length 10!
sample(x[x > 10]) # length 0
## safer version:
resample <- function(x, ...) x[sample.int(length(x), ...)]
resample(x[x >  8]) # length 2
resample(x[x >  9]) # length 1
resample(x[x > 10]) # length 0
clearPushBack()
View(y8)
View(resample)
?resample
sample.int(10, size=2, replace=FALSE)
sample.int(10, size=2, replace=FALSE)
sample.int(10, size=2, replace=FALSE)
sample.int(10, size=2, replace=FALSE)
sample.int(10, size=2, replace=FALSE)
sample.int(10, replace=FALSE)
x.nrow <- nrow(x.test)
x.nrow
x.training <- x.test[sample.int(x.nrow, replace=FALSE)]]
x.training <- x.test[sample.int(x.nrow, replace=FALSE)]
x.training
x.training <- x.test[sample.int(x.nrow, replace=FALSE), ]
x.training
x.training <- x.test[sample.int(x.nrow, size=x.nrow*4/5, replace=FALSE), ]
x.training
random.slice <- sample.int(x.nrow*4/5)
random.slice
x.training <- x.test[random.slice,]
x.test <- x.test[-random.slice,]
x.test
x.training
random.slice
sort(random.slice)
x.test
mse(x.test, x.test)
?mse
??mse
x.test - (x.test)
(x.test-x.test)^2
mean((x.test-x.test)^2)
?mean
predicted.MSE <-
sdf
x <- c(0:10, 50)
xm <- mean(x)
x
xm
x <- cbind(x, 0:10, 100)
x <- cbind(x, 0:11)
x
mean(x)
x
colMeans(x)
x
colMeans(x)
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
# Q1
linear <- function(y,X){
if (qr(X)$rank != ncol(X)) {stop("X is rank deficient")}
return(solve(t(X)%*%X)%*%t(X)%*%y)
}
# Q2
linear2 <- function(y,X){
X.numrows <- nrow(X)
random.slice <- sample.int(X.numrows*4/5)
x.training <- X[random.slice,]
y.training <- y[random.slice,]
x.test <- X[-random.slice,]
y.test <- y[-random.slice,]
if (qr(x.training)$rank != ncol(x.training)) {stop("Training data is rank deficient")}
beta.ols <- solve(t(x.training)%*%x.training)%*%t(x.training)%*%y.training
y.predicted <- x.test %*% beta.ols
predicted.MSE <- colMeans((y.test-y.predicted)^2)
return(list(predicted.MSE, beta.ols))
}
linear(weight, group)
weight
group
A <- matrix(nrow = 4, ncol = 3,
+ data = c(3, 1, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0))
> B <- c(2, 1, 8, 3)
A <- matrix(nrow = 4, ncol = 3,
+ data = c(3, 1, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0) B <- c(2, 1, 8, 3)
A <- matrix(nrow = 4, ncol = 3,
+ data = c(3, 1, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0)
A <- matrix(nrow = 4, ncol = 3, data = c(3, 1, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0))
A
B <- c(2, 1, 8, 3)
A <- matrix(nrow = 15, ncol = 2, data = c(3, 1, 2, 0, 2, 0, 0, 1, 1, 0, 2, 0, 1,2,3,4,5,7,3,5,1,2,4,5,7,8,9,3,1,4))
A
B
B <- c(2, 1, 8, 3, 31,7,2,4,5,1,7,8,3,4,7)
B
A
B
linear(B, A)
linear2(B, A)
# Q1
linear <- function(y,X){
if (qr(X)$rank != ncol(X)) {stop("X is rank deficient")}
return(solve(t(X)%*%X)%*%t(X)%*%y)
}
# Q2
linear2 <- function(y,X){
X.numrows <- nrow(X)
random.slice <- sample.int(X.numrows*4/5)
x.training <- X[random.slice,]
y.training <- y[random.slice]
x.test <- X[-random.slice,]
y.test <- y[-random.slice]
if (qr(x.training)$rank != ncol(x.training)) {stop("Training data is rank deficient")}
beta.ols <- solve(t(x.training)%*%x.training)%*%t(x.training)%*%y.training
y.predicted <- x.test %*% beta.ols
predicted.MSE <- colMeans((y.test-y.predicted)^2)
return(list(predicted.MSE, beta.ols))
}
linear2(B, A)
linear2(B, A)
linear(B, A)
solve(A, B)
lsei(A, B)
?lm
lm.1 <- lm(B ~ A)
summary(lm.1)
linear(B, A)
lm.1 <- lm(B ~ A - 1)
summary(lm.1)
linear(B, A)
linear(B, A)
linear2(B, A)
a, b <- linear2(B,A)
[a, b] <- linear2(B,A)
list[mse, beta] <- linear2(B,A)
output <- linear2(B, A)
output
output$1
output[1]
output[1]$1
output[1]
output[2]
output
predicted.MSE <- colMeans((y.test-y.predicted)^2)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
z
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_dic
my_div
c(1,2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
exit
exit()
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("./testdir/")
setwd("./testdir")
setwd("testdir/")
setwd("testdir")
getwd()
setwd(old.dir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
dir()
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
?par
ls
dir()
unlink("testdir/", recursive = TRUE)
ls
ls()
dir()
unlink("testdir", recursive = TRUE)
rm()
rm(list(ls()))
rm(list=ls())
swirl()
git config --global user.name
vec <- c(56.1, 55.8, 56.3, 56.0, 56.3)
var(vec)
sd(vec)/sqrt(5)
rand.err <- sd(vec)/sqrt(5)
sqrt(0.3^2*5)
sys.err <- sqrt(0.3^2 * 5)
clc
mean(vec)
?sd''
?sd
rand.err*(4/5)
rand.err <- rand.err*sqrt(4/5)
clc
sqrt(rand.err^2 + sys.err^2)
dat <- c(59.6, 61.2, 61.8, 61.2, 61.2)
mean(dat)
sys <- sqrt(5*0.3^2)
sd(dat)/sqrt(5)*(sqrt(4))
sd(dat)/sqrt(5)*(sqrt(4))
stat <- sd(dat)/sqrt(5)*(sqrt(4))
sqrt(sys^2 + stat^2)
attach(cars)
cars
plot(cars)
new <- cars[order(mpg),]
new <- cars[order(cars$mpg),]
attach(mtcars)
detach(cars)
newdata <- mtcars[order(mpg),]
plot(newdata)
boxplot(newdata)
View(newdata)
plot(x=mpg, y=cyl, data=newdata)
plot(x=mpg, y=cyl, data=mtcars)
plot(x=mpg, y=cyl, data=mtcars)
newdata <- mtcars[order(-mpg),]
warnings()
plot(x=newdata$mpg, y=newdata$cyl)
plot(x=mtcars$mpg, y=mtcars$cyl)
View(mtcars)
hist(x=mpg)
a <- c(500, 256.79, -88.13)
b <- c(0, 8, 25)
library(ggplot2)
plot(x=b, y=a)
lines(x=b, y=a)
lines(x=b, y=a, xlab="Interest Rate (%)", ylab="NPW ($)")
lines(x=b, y=a, xlab="Interest Rate (%)", ylab="NPW ($)")
plot(x=b, y=a, xlab="Interest Rate (%)", ylab="NPW ($)")
lines(x=b, y=a, xlab="Interest Rate (%)", ylab="NPW ($)")
lines(x=c(0,25), y=(0,0), xlab="Interest Rate (%)", ylab="NPW ($)")
lines(x=c(0,25), y=c(0,0), xlab="Interest Rate (%)", ylab="NPW ($)")
workshop_home <- "C:/Users/kevin/Documents/GitHub/lightcurve-classification/data/"
setwd(workshop_home)
# Load test set
load("test_set.RData")
load("training_set.RData")
levels(training_set_features$class)
print(paste(levels(training_set_features$class), collapse=' ')
print(paste(levels(training_set_features$class), collapse=' '))
print(paste(levels(training_set_features$class), collapse=' '))
